{"version":3,"sources":["components/Monster/monster.helper.tsx","components/SearchBox/SearchBox.tsx","components/Monster/MonsterCard.tsx","components/ItemsGallery/ItemsGallery.tsx","components/MonstersRolodex/MonstersRolodex.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["toMonster","id","name","email","SearchBox","items","searchOnKey","placeholder","onResults","className","type","onChange","e","searchQuery","foundItems","filter","item","String","toLowerCase","includes","searchMonsters","target","value","MonsterCard","monster","removeMonster","onClick","src","alt","ItemsGallery","map","key","shortid","MonstersRolodex","props","monsterToRemove","setState","foundMonsters","state","updateListMonsters","monsters","this","_fetchMonsters","monstersDatasourceUrl","startsWith","numberOfMonsters","fetch","then","response","json","rawMonsters","splice","_monsters","_foundMonsters","Component","defaultProps","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21320193.chunk.js","sourcesContent":["import { Monster } from \"./monster.model\";\nimport * as shortid from \"shortid\";\n\nexport const toMonster = ({\n  id,\n  name,\n  email,\n}: {\n  id: number;\n  name: string;\n  email: string;\n}): Monster => ({ id, name, email });\n\nexport const keygen = () => shortid.generate();\n","import { ChangeEvent, FC, ReactElement } from \"react\";\nimport { Monster } from \"../Monster/monster.model\";\nimport \"./search-box.styles.css\";\nexport type SearchBoxProps<T = any> = {\n  items: T[];\n  placeholder: string;\n  searchOnKey: keyof Monster;\n  onResults: (foundMonsters: Monster[]) => void;\n};\n\nexport const SearchBox: FC<SearchBoxProps> = ({\n  items,\n  searchOnKey,\n  placeholder,\n  onResults,\n}): ReactElement => {\n  const searchMonsters = (searchQuery: string) => {\n    const foundItems = items.filter((item) =>\n      String((item as any)[searchOnKey])\n        .toLowerCase()\n        .includes(searchQuery.toLowerCase())\n    );\n    onResults(foundItems);\n  };\n\n  return (\n    <div>\n      <input\n        className=\"search-box\"\n        type=\"search\"\n        placeholder={placeholder || \"\"}\n        onChange={(e: ChangeEvent) =>\n          searchMonsters((e.target as HTMLInputElement).value)\n        }\n      />\n    </div>\n  );\n};\n","import { FC, ReactElement } from \"react\";\nimport { Monster } from \"./monster.model\";\nimport \"./monster-card.styles.css\";\nconst PICTURE_SOURCE = \"https://robohash.org/\";\n\nexport type MonsterProps = {\n  monster: Monster;\n  removeMonster: (monster: Monster) => void;\n};\n\nexport const MonsterCard: FC<MonsterProps> = ({\n  monster,\n  removeMonster,\n}): ReactElement => (\n  <div className=\"monster-card\" onClick={(e) => removeMonster(monster)}>\n    <img\n      src={`${PICTURE_SOURCE}/${monster.id}?set=set2&size=200x200`}\n      alt={monster.name}\n    />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n);\n/*\n<img\n      src={`${pictureSource}/${monster.id}?size=200x200`}\n      alt={monster.name}\n    />\n    <h3>{monster?.name}</h3>\n    <p>\n      <a href={`mailto://${monster.email}`}>{monster.email}</a>\n    </p>\n*/\n","import { FC, ReactElement } from \"react\";\nimport { keygen } from \"../Monster/monster.helper\";\nimport { Monster } from \"../Monster/monster.model\";\nimport { MonsterCard } from \"../Monster/MonsterCard\";\nimport \"./items-gallery.css\";\n\ntype Item = { id: number; name: string; email: string };\n\nexport type ItemsGalleryProps = {\n  items: Item[];\n  removeMonster: (monster: Monster) => void;\n};\n\nexport const ItemsGallery: FC<ItemsGalleryProps> = ({\n  items,\n  removeMonster,\n}): ReactElement => (\n  <div className=\"items-gallery\">\n    {(items || []).map((monster) => (\n      <MonsterCard {...{ monster, removeMonster, key: keygen() }} />\n    ))}\n  </div>\n);\n","import { Component } from \"react\";\nimport { Monster } from \"../Monster/monster.model\";\nimport { toMonster } from \"../Monster/monster.helper\";\nimport { SearchBox } from \"../SearchBox/SearchBox\";\nimport { ItemsGallery } from \"../ItemsGallery/ItemsGallery\";\nimport \"./monsters-rolodex.styles.css\";\n\ntype MonstersRolodexProps = {\n  monstersDatasourceUrl?: string;\n  numberOfMonsters?: number;\n};\ntype MonstersRolodexState = {\n  monsters: Monster[];\n  foundMonsters: Monster[];\n};\n\nexport class MonstersRolodex extends Component<\n  MonstersRolodexProps,\n  MonstersRolodexState\n> {\n  constructor(props: MonstersRolodexProps) {\n    super(props);\n    this.state = {\n      monsters: [],\n      foundMonsters: [],\n    };\n  }\n\n  public static defaultProps = {\n    monstersDatasourceUrl: \"https://jsonplaceholder.typicode.com/users\",\n    numberOfMonsters: 8,\n  };\n\n  componentDidMount() {\n    this._fetchMonsters();\n  }\n\n  private _fetchMonsters() {\n    const canFetchMonsters: boolean =\n      (this.props?.monstersDatasourceUrl || \"\").startsWith(\"http\") &&\n      (this.props?.numberOfMonsters || 0) > 0;\n\n    canFetchMonsters &&\n      fetch(this.props?.monstersDatasourceUrl || \"\")\n        .then((response) => response.json())\n        .then((rawMonsters) => {\n          const monsters = (rawMonsters || [])\n            .splice(0, this.props?.numberOfMonsters || 0)\n            .map(toMonster);\n\n          this.setState({\n            monsters,\n            foundMonsters: monsters,\n          });\n        });\n  }\n\n  private get _monsters(): Monster[] {\n    return this.state.monsters || [];\n  }\n\n  private get _foundMonsters(): Monster[] {\n    return this.state.foundMonsters;\n  }\n\n  removeMonster = (monsterToRemove: Monster) => {\n    this.setState({\n      foundMonsters: [...this.state.foundMonsters].filter(\n        (monster) => monster.id !== monsterToRemove.id\n      ),\n    });\n  };\n\n  updateListMonsters = (\n    foundMonsters: { id: number; name: string; email: string }[]\n  ) => {\n    this.setState({\n      foundMonsters: foundMonsters.map(toMonster),\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"searchbox-container\">\n          <SearchBox\n            items={this._monsters}\n            placeholder={\"search monster by name\"}\n            onResults={this.updateListMonsters}\n            searchOnKey={\"name\"}\n          />\n        </div>\n        <ItemsGallery\n          {...{\n            items: this._foundMonsters,\n            removeMonster: this.removeMonster,\n          }}\n        />\n      </>\n    );\n  }\n}\n","import \"./App.css\";\nimport { MonstersRolodex } from \"./components/MonstersRolodex/MonstersRolodex\";\n\nexport const App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <h1>Monster Rolodex</h1>\n      <MonstersRolodex key={\"rolodex\"} />\n    </header>\n  </div>\n);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}